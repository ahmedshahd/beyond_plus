scalar DateTime

type Provider {
  id: Int!
  name: String!
  address: String
  longitude: Float
  latitude: Float
  phoneNumber: [String]
  email: String
  isOnline: Boolean
  hasChronicMedication: Boolean
  websiteUrl: String
  areaId: Int
  specialityId: Int
  subSpecialityId: Int
  categoryId: Int
  language: LanguageEnum!
  createdAt: DateTime
  updatedAt: DateTime
}

type ProviderByPagination {
  provider: [Provider]!
  pagination: Pagination
}

input CreateProviderInput {
  name: String!
  address: String!
  longitude: Float
  latitude: Float
  phoneNumber: [String]!
  email: String
  isOnline: Boolean
  hasChronicMedication: Boolean
  websiteUrl: String
  categoryId: Int!
  areaId: Int!
  specialityId: Int!
  subSpecialityId: Int
}

input UpdateProviderInput {
  id: Int!
  name: String
  address: String
  longitude: Float
  latitude: Float
  phoneNumber: [String]
  email: String
  isOnline: Boolean
  hasChronicMedication: Boolean
  websiteUrl: String
  categoryId: Int
  areaId: Int
  specialityId: Int
  subSpecialityId: Int
}

type Query {
  listAllProvidersBySpecialityIdAndSubSpecialityIdAndAreaIdAndCategoryId(
    language: LanguageEnum!
    specialityId: [Int!]!
    subSpecialityId: [Int!]!
    areaId: [Int!]!
    categoryId: [Int!]!
    search: String
    page: Int
    limit: Int
  ): ProviderByPagination!
}

type Mutation {
  createProvider(
    createProviderInput: CreateProviderInput!
    language: LanguageEnum!
  ): Provider!
  updateProvider(updateProviderInput: UpdateProviderInput!): Provider!
  removeProvider(id: Int!): Provider
}
