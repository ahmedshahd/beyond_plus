type User {
  id: Int!
  email: String
  username: String!
  name: String
  insuranceCompanyName: String
  companyWork: String
  password: String!
  countryCode: String!
  mobile: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateUserInput {
  email: String
  name: String
  insuranceCompanyName: String
  companyWork: String
  password: String!
  countryCode: String!
  mobile: String!
}

input UpdateUserInput {
  id: Int!
  email: String
  username: String
  name: String
  insuranceCompanyName: String
  companyWork: String
  password: String
  countryCode: String
  mobile: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LoginUserInput {
  username: String!
  password: String!
}

type LoginUserOutput {
  accessToken: String!
  expiresIn: Int!
  refreshToken: String!
  refreshExpiresIn: Int!
}

type Query {
  users: [User]!
  user(id: Int!): User! 
  login(loginUserInput: LoginUserInput!): LoginUserOutput!
  accessTokenFromRefreshToken(refreshToken:String): LoginUserOutput!
}

type Mutation {
  register(createUserInput: CreateUserInput!): User
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User
}
